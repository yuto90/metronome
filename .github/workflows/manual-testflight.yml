name: Manual TestFlight Upload

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'main'
      changelog:
        description: 'Release notes for TestFlight'
        required: false
        default: 'Manual build from GitHub Actions'

jobs:
  manual-testflight-upload:
    name: Manual TestFlight Build
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
        
      - name: Setup FVM
        uses: kuhnroyal/flutter-fvm-config-action@v2
        
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version-file: .fvm/fvm_config.json
          cache: true
          
      - name: Install dependencies
        run: flutter pub get
        
      - name: Setup Ruby for fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
          working-directory: ios
          
      - name: Install fastlane
        run: |
          cd ios
          gem install fastlane
          
      - name: Setup Apple certificates
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_PROVISIONING_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create certificates directory
          mkdir -p ~/certificates
          
          # Decode and install certificate
          echo $APPLE_CERTIFICATE_BASE64 | base64 --decode > ~/certificates/certificate.p12
          
          # Decode and install provisioning profile
          echo $APPLE_PROVISIONING_PROFILE_BASE64 | base64 --decode > ~/certificates/profile.mobileprovision
          
          # Install certificate
          security create-keychain -p "" build.keychain
          security import ~/certificates/certificate.p12 -k ~/build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -A
          security list-keychains -s ~/build.keychain
          security default-keychain -s ~/build.keychain
          security unlock-keychain -p "" ~/build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
      - name: Build iOS app
        run: |
          flutter build ios --release --no-codesign
          
      - name: Archive and upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_BASE64: ${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}
          CUSTOM_CHANGELOG: ${{ github.event.inputs.changelog }}
        run: |
          cd ios
          
          # Setup App Store Connect API key
          mkdir -p ~/private_keys
          echo $APP_STORE_CONNECT_API_KEY_BASE64 | base64 --decode > ~/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Update changelog in fastlane if provided
          if [ ! -z "$CUSTOM_CHANGELOG" ]; then
            export FASTLANE_CHANGELOG="$CUSTOM_CHANGELOG"
          fi
          
          # Run fastlane to build and upload
          fastlane build_and_upload_testflight
          
      - name: Create GitHub Release (optional)
        if: github.event.inputs.branch == 'main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: testflight-${{ github.run_number }}
          release_name: TestFlight Build ${{ github.run_number }}
          body: |
            Automated TestFlight build from main branch.
            
            **Build Information:**
            - Branch: ${{ github.event.inputs.branch }}
            - Commit: ${{ github.sha }}
            - Build Date: ${{ steps.date.outputs.date }}
            
            **Changes:**
            ${{ github.event.inputs.changelog }}
          draft: false
          prerelease: true